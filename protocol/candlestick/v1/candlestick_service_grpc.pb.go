// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: candlestick/v1/candlestick_service.proto

package candlestick

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CandlestickService_GetCandlestickByTimePoint_FullMethodName = "/candlestick.CandlestickService/GetCandlestickByTimePoint"
	CandlestickService_PollCandlesticksFromTo_FullMethodName    = "/candlestick.CandlestickService/PollCandlesticksFromTo"
	CandlestickService_GetLastCandlestick_FullMethodName        = "/candlestick.CandlestickService/GetLastCandlestick"
	CandlestickService_PollLastCandlesticks_FullMethodName      = "/candlestick.CandlestickService/PollLastCandlesticks"
)

// CandlestickServiceClient is the client API for CandlestickService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CandlestickServiceClient interface {
	GetCandlestickByTimePoint(ctx context.Context, in *CandlestickRequest, opts ...grpc.CallOption) (*CandlestickResponse, error)
	PollCandlesticksFromTo(ctx context.Context, in *CandlesticksRequest, opts ...grpc.CallOption) (CandlestickService_PollCandlesticksFromToClient, error)
	GetLastCandlestick(ctx context.Context, in *CandlestickRequest, opts ...grpc.CallOption) (*CandlestickResponse, error)
	PollLastCandlesticks(ctx context.Context, in *CandlestickRequest, opts ...grpc.CallOption) (CandlestickService_PollLastCandlesticksClient, error)
}

type candlestickServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCandlestickServiceClient(cc grpc.ClientConnInterface) CandlestickServiceClient {
	return &candlestickServiceClient{cc}
}

func (c *candlestickServiceClient) GetCandlestickByTimePoint(ctx context.Context, in *CandlestickRequest, opts ...grpc.CallOption) (*CandlestickResponse, error) {
	out := new(CandlestickResponse)
	err := c.cc.Invoke(ctx, CandlestickService_GetCandlestickByTimePoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candlestickServiceClient) PollCandlesticksFromTo(ctx context.Context, in *CandlesticksRequest, opts ...grpc.CallOption) (CandlestickService_PollCandlesticksFromToClient, error) {
	stream, err := c.cc.NewStream(ctx, &CandlestickService_ServiceDesc.Streams[0], CandlestickService_PollCandlesticksFromTo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &candlestickServicePollCandlesticksFromToClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CandlestickService_PollCandlesticksFromToClient interface {
	Recv() (*Candlestick, error)
	grpc.ClientStream
}

type candlestickServicePollCandlesticksFromToClient struct {
	grpc.ClientStream
}

func (x *candlestickServicePollCandlesticksFromToClient) Recv() (*Candlestick, error) {
	m := new(Candlestick)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *candlestickServiceClient) GetLastCandlestick(ctx context.Context, in *CandlestickRequest, opts ...grpc.CallOption) (*CandlestickResponse, error) {
	out := new(CandlestickResponse)
	err := c.cc.Invoke(ctx, CandlestickService_GetLastCandlestick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candlestickServiceClient) PollLastCandlesticks(ctx context.Context, in *CandlestickRequest, opts ...grpc.CallOption) (CandlestickService_PollLastCandlesticksClient, error) {
	stream, err := c.cc.NewStream(ctx, &CandlestickService_ServiceDesc.Streams[1], CandlestickService_PollLastCandlesticks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &candlestickServicePollLastCandlesticksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CandlestickService_PollLastCandlesticksClient interface {
	Recv() (*Candlestick, error)
	grpc.ClientStream
}

type candlestickServicePollLastCandlesticksClient struct {
	grpc.ClientStream
}

func (x *candlestickServicePollLastCandlesticksClient) Recv() (*Candlestick, error) {
	m := new(Candlestick)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CandlestickServiceServer is the server API for CandlestickService service.
// All implementations must embed UnimplementedCandlestickServiceServer
// for forward compatibility
type CandlestickServiceServer interface {
	GetCandlestickByTimePoint(context.Context, *CandlestickRequest) (*CandlestickResponse, error)
	PollCandlesticksFromTo(*CandlesticksRequest, CandlestickService_PollCandlesticksFromToServer) error
	GetLastCandlestick(context.Context, *CandlestickRequest) (*CandlestickResponse, error)
	PollLastCandlesticks(*CandlestickRequest, CandlestickService_PollLastCandlesticksServer) error
	mustEmbedUnimplementedCandlestickServiceServer()
}

// UnimplementedCandlestickServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCandlestickServiceServer struct {
}

func (UnimplementedCandlestickServiceServer) GetCandlestickByTimePoint(context.Context, *CandlestickRequest) (*CandlestickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandlestickByTimePoint not implemented")
}
func (UnimplementedCandlestickServiceServer) PollCandlesticksFromTo(*CandlesticksRequest, CandlestickService_PollCandlesticksFromToServer) error {
	return status.Errorf(codes.Unimplemented, "method PollCandlesticksFromTo not implemented")
}
func (UnimplementedCandlestickServiceServer) GetLastCandlestick(context.Context, *CandlestickRequest) (*CandlestickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastCandlestick not implemented")
}
func (UnimplementedCandlestickServiceServer) PollLastCandlesticks(*CandlestickRequest, CandlestickService_PollLastCandlesticksServer) error {
	return status.Errorf(codes.Unimplemented, "method PollLastCandlesticks not implemented")
}
func (UnimplementedCandlestickServiceServer) mustEmbedUnimplementedCandlestickServiceServer() {}

// UnsafeCandlestickServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandlestickServiceServer will
// result in compilation errors.
type UnsafeCandlestickServiceServer interface {
	mustEmbedUnimplementedCandlestickServiceServer()
}

func RegisterCandlestickServiceServer(s grpc.ServiceRegistrar, srv CandlestickServiceServer) {
	s.RegisterService(&CandlestickService_ServiceDesc, srv)
}

func _CandlestickService_GetCandlestickByTimePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandlestickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandlestickServiceServer).GetCandlestickByTimePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandlestickService_GetCandlestickByTimePoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandlestickServiceServer).GetCandlestickByTimePoint(ctx, req.(*CandlestickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandlestickService_PollCandlesticksFromTo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CandlesticksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CandlestickServiceServer).PollCandlesticksFromTo(m, &candlestickServicePollCandlesticksFromToServer{stream})
}

type CandlestickService_PollCandlesticksFromToServer interface {
	Send(*Candlestick) error
	grpc.ServerStream
}

type candlestickServicePollCandlesticksFromToServer struct {
	grpc.ServerStream
}

func (x *candlestickServicePollCandlesticksFromToServer) Send(m *Candlestick) error {
	return x.ServerStream.SendMsg(m)
}

func _CandlestickService_GetLastCandlestick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandlestickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandlestickServiceServer).GetLastCandlestick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandlestickService_GetLastCandlestick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandlestickServiceServer).GetLastCandlestick(ctx, req.(*CandlestickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandlestickService_PollLastCandlesticks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CandlestickRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CandlestickServiceServer).PollLastCandlesticks(m, &candlestickServicePollLastCandlesticksServer{stream})
}

type CandlestickService_PollLastCandlesticksServer interface {
	Send(*Candlestick) error
	grpc.ServerStream
}

type candlestickServicePollLastCandlesticksServer struct {
	grpc.ServerStream
}

func (x *candlestickServicePollLastCandlesticksServer) Send(m *Candlestick) error {
	return x.ServerStream.SendMsg(m)
}

// CandlestickService_ServiceDesc is the grpc.ServiceDesc for CandlestickService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandlestickService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "candlestick.CandlestickService",
	HandlerType: (*CandlestickServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCandlestickByTimePoint",
			Handler:    _CandlestickService_GetCandlestickByTimePoint_Handler,
		},
		{
			MethodName: "GetLastCandlestick",
			Handler:    _CandlestickService_GetLastCandlestick_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollCandlesticksFromTo",
			Handler:       _CandlestickService_PollCandlesticksFromTo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PollLastCandlesticks",
			Handler:       _CandlestickService_PollLastCandlesticks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "candlestick/v1/candlestick_service.proto",
}
