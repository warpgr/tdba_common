// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: prices/v1/prices_service.proto

package prices

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PricesService_GetPriceFor_FullMethodName         = "/prices.v1.PricesService/GetPriceFor"
	PricesService_PollPriceFor_FullMethodName        = "/prices.v1.PricesService/PollPriceFor"
	PricesService_GetPricesFor_FullMethodName        = "/prices.v1.PricesService/GetPricesFor"
	PricesService_PollPricesFor_FullMethodName       = "/prices.v1.PricesService/PollPricesFor"
	PricesService_PollPriceFromToFor_FullMethodName  = "/prices.v1.PricesService/PollPriceFromToFor"
	PricesService_PollPricesFromToFor_FullMethodName = "/prices.v1.PricesService/PollPricesFromToFor"
)

// PricesServiceClient is the client API for PricesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricesServiceClient interface {
	GetPriceFor(ctx context.Context, in *GetPriceForRequest, opts ...grpc.CallOption) (*GetPriceForResponse, error)
	PollPriceFor(ctx context.Context, in *GetPriceForRequest, opts ...grpc.CallOption) (PricesService_PollPriceForClient, error)
	GetPricesFor(ctx context.Context, in *GetPricesForRequest, opts ...grpc.CallOption) (*GetPricesForResponse, error)
	PollPricesFor(ctx context.Context, in *GetPricesForRequest, opts ...grpc.CallOption) (PricesService_PollPricesForClient, error)
	PollPriceFromToFor(ctx context.Context, in *GetPriceFromToRequest, opts ...grpc.CallOption) (PricesService_PollPriceFromToForClient, error)
	PollPricesFromToFor(ctx context.Context, in *GetPricesFromToRequest, opts ...grpc.CallOption) (PricesService_PollPricesFromToForClient, error)
}

type pricesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPricesServiceClient(cc grpc.ClientConnInterface) PricesServiceClient {
	return &pricesServiceClient{cc}
}

func (c *pricesServiceClient) GetPriceFor(ctx context.Context, in *GetPriceForRequest, opts ...grpc.CallOption) (*GetPriceForResponse, error) {
	out := new(GetPriceForResponse)
	err := c.cc.Invoke(ctx, PricesService_GetPriceFor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricesServiceClient) PollPriceFor(ctx context.Context, in *GetPriceForRequest, opts ...grpc.CallOption) (PricesService_PollPriceForClient, error) {
	stream, err := c.cc.NewStream(ctx, &PricesService_ServiceDesc.Streams[0], PricesService_PollPriceFor_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pricesServicePollPriceForClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PricesService_PollPriceForClient interface {
	Recv() (*GetPriceForResponse, error)
	grpc.ClientStream
}

type pricesServicePollPriceForClient struct {
	grpc.ClientStream
}

func (x *pricesServicePollPriceForClient) Recv() (*GetPriceForResponse, error) {
	m := new(GetPriceForResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pricesServiceClient) GetPricesFor(ctx context.Context, in *GetPricesForRequest, opts ...grpc.CallOption) (*GetPricesForResponse, error) {
	out := new(GetPricesForResponse)
	err := c.cc.Invoke(ctx, PricesService_GetPricesFor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricesServiceClient) PollPricesFor(ctx context.Context, in *GetPricesForRequest, opts ...grpc.CallOption) (PricesService_PollPricesForClient, error) {
	stream, err := c.cc.NewStream(ctx, &PricesService_ServiceDesc.Streams[1], PricesService_PollPricesFor_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pricesServicePollPricesForClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PricesService_PollPricesForClient interface {
	Recv() (*GetPricesForResponse, error)
	grpc.ClientStream
}

type pricesServicePollPricesForClient struct {
	grpc.ClientStream
}

func (x *pricesServicePollPricesForClient) Recv() (*GetPricesForResponse, error) {
	m := new(GetPricesForResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pricesServiceClient) PollPriceFromToFor(ctx context.Context, in *GetPriceFromToRequest, opts ...grpc.CallOption) (PricesService_PollPriceFromToForClient, error) {
	stream, err := c.cc.NewStream(ctx, &PricesService_ServiceDesc.Streams[2], PricesService_PollPriceFromToFor_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pricesServicePollPriceFromToForClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PricesService_PollPriceFromToForClient interface {
	Recv() (*GetPriceFromToResponse, error)
	grpc.ClientStream
}

type pricesServicePollPriceFromToForClient struct {
	grpc.ClientStream
}

func (x *pricesServicePollPriceFromToForClient) Recv() (*GetPriceFromToResponse, error) {
	m := new(GetPriceFromToResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pricesServiceClient) PollPricesFromToFor(ctx context.Context, in *GetPricesFromToRequest, opts ...grpc.CallOption) (PricesService_PollPricesFromToForClient, error) {
	stream, err := c.cc.NewStream(ctx, &PricesService_ServiceDesc.Streams[3], PricesService_PollPricesFromToFor_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pricesServicePollPricesFromToForClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PricesService_PollPricesFromToForClient interface {
	Recv() (*GetPricesFromToResponse, error)
	grpc.ClientStream
}

type pricesServicePollPricesFromToForClient struct {
	grpc.ClientStream
}

func (x *pricesServicePollPricesFromToForClient) Recv() (*GetPricesFromToResponse, error) {
	m := new(GetPricesFromToResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PricesServiceServer is the server API for PricesService service.
// All implementations must embed UnimplementedPricesServiceServer
// for forward compatibility
type PricesServiceServer interface {
	GetPriceFor(context.Context, *GetPriceForRequest) (*GetPriceForResponse, error)
	PollPriceFor(*GetPriceForRequest, PricesService_PollPriceForServer) error
	GetPricesFor(context.Context, *GetPricesForRequest) (*GetPricesForResponse, error)
	PollPricesFor(*GetPricesForRequest, PricesService_PollPricesForServer) error
	PollPriceFromToFor(*GetPriceFromToRequest, PricesService_PollPriceFromToForServer) error
	PollPricesFromToFor(*GetPricesFromToRequest, PricesService_PollPricesFromToForServer) error
	mustEmbedUnimplementedPricesServiceServer()
}

// UnimplementedPricesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPricesServiceServer struct {
}

func (UnimplementedPricesServiceServer) GetPriceFor(context.Context, *GetPriceForRequest) (*GetPriceForResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceFor not implemented")
}
func (UnimplementedPricesServiceServer) PollPriceFor(*GetPriceForRequest, PricesService_PollPriceForServer) error {
	return status.Errorf(codes.Unimplemented, "method PollPriceFor not implemented")
}
func (UnimplementedPricesServiceServer) GetPricesFor(context.Context, *GetPricesForRequest) (*GetPricesForResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPricesFor not implemented")
}
func (UnimplementedPricesServiceServer) PollPricesFor(*GetPricesForRequest, PricesService_PollPricesForServer) error {
	return status.Errorf(codes.Unimplemented, "method PollPricesFor not implemented")
}
func (UnimplementedPricesServiceServer) PollPriceFromToFor(*GetPriceFromToRequest, PricesService_PollPriceFromToForServer) error {
	return status.Errorf(codes.Unimplemented, "method PollPriceFromToFor not implemented")
}
func (UnimplementedPricesServiceServer) PollPricesFromToFor(*GetPricesFromToRequest, PricesService_PollPricesFromToForServer) error {
	return status.Errorf(codes.Unimplemented, "method PollPricesFromToFor not implemented")
}
func (UnimplementedPricesServiceServer) mustEmbedUnimplementedPricesServiceServer() {}

// UnsafePricesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricesServiceServer will
// result in compilation errors.
type UnsafePricesServiceServer interface {
	mustEmbedUnimplementedPricesServiceServer()
}

func RegisterPricesServiceServer(s grpc.ServiceRegistrar, srv PricesServiceServer) {
	s.RegisterService(&PricesService_ServiceDesc, srv)
}

func _PricesService_GetPriceFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceForRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricesServiceServer).GetPriceFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricesService_GetPriceFor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricesServiceServer).GetPriceFor(ctx, req.(*GetPriceForRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricesService_PollPriceFor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPriceForRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PricesServiceServer).PollPriceFor(m, &pricesServicePollPriceForServer{stream})
}

type PricesService_PollPriceForServer interface {
	Send(*GetPriceForResponse) error
	grpc.ServerStream
}

type pricesServicePollPriceForServer struct {
	grpc.ServerStream
}

func (x *pricesServicePollPriceForServer) Send(m *GetPriceForResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PricesService_GetPricesFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPricesForRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricesServiceServer).GetPricesFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricesService_GetPricesFor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricesServiceServer).GetPricesFor(ctx, req.(*GetPricesForRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricesService_PollPricesFor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPricesForRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PricesServiceServer).PollPricesFor(m, &pricesServicePollPricesForServer{stream})
}

type PricesService_PollPricesForServer interface {
	Send(*GetPricesForResponse) error
	grpc.ServerStream
}

type pricesServicePollPricesForServer struct {
	grpc.ServerStream
}

func (x *pricesServicePollPricesForServer) Send(m *GetPricesForResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PricesService_PollPriceFromToFor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPriceFromToRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PricesServiceServer).PollPriceFromToFor(m, &pricesServicePollPriceFromToForServer{stream})
}

type PricesService_PollPriceFromToForServer interface {
	Send(*GetPriceFromToResponse) error
	grpc.ServerStream
}

type pricesServicePollPriceFromToForServer struct {
	grpc.ServerStream
}

func (x *pricesServicePollPriceFromToForServer) Send(m *GetPriceFromToResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PricesService_PollPricesFromToFor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPricesFromToRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PricesServiceServer).PollPricesFromToFor(m, &pricesServicePollPricesFromToForServer{stream})
}

type PricesService_PollPricesFromToForServer interface {
	Send(*GetPricesFromToResponse) error
	grpc.ServerStream
}

type pricesServicePollPricesFromToForServer struct {
	grpc.ServerStream
}

func (x *pricesServicePollPricesFromToForServer) Send(m *GetPricesFromToResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PricesService_ServiceDesc is the grpc.ServiceDesc for PricesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PricesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prices.v1.PricesService",
	HandlerType: (*PricesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPriceFor",
			Handler:    _PricesService_GetPriceFor_Handler,
		},
		{
			MethodName: "GetPricesFor",
			Handler:    _PricesService_GetPricesFor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollPriceFor",
			Handler:       _PricesService_PollPriceFor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PollPricesFor",
			Handler:       _PricesService_PollPricesFor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PollPriceFromToFor",
			Handler:       _PricesService_PollPriceFromToFor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PollPricesFromToFor",
			Handler:       _PricesService_PollPricesFromToFor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prices/v1/prices_service.proto",
}
