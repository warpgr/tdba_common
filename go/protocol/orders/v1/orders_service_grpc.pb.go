// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: orders/v1/orders_service.proto

package orders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrdersService_PlaceOrder_FullMethodName                  = "/orders.v1.OrdersService/PlaceOrder"
	OrdersService_CancelOrder_FullMethodName                 = "/orders.v1.OrdersService/CancelOrder"
	OrdersService_GetOrder_FullMethodName                    = "/orders.v1.OrdersService/GetOrder"
	OrdersService_PollOrder_FullMethodName                   = "/orders.v1.OrdersService/PollOrder"
	OrdersService_GetOrders_FullMethodName                   = "/orders.v1.OrdersService/GetOrders"
	OrdersService_PollOrders_FullMethodName                  = "/orders.v1.OrdersService/PollOrders"
	OrdersService_GetOrdersByUserCredenntials_FullMethodName = "/orders.v1.OrdersService/GetOrdersByUserCredenntials"
)

// OrdersServiceClient is the client API for OrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersServiceClient interface {
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error)
	CancelOrder(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error)
	GetOrder(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error)
	PollOrder(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (OrdersService_PollOrderClient, error)
	GetOrders(ctx context.Context, in *OrdersStatusesRequest, opts ...grpc.CallOption) (*OrdersStatusesResponse, error)
	PollOrders(ctx context.Context, in *OrdersStatusesRequest, opts ...grpc.CallOption) (OrdersService_PollOrdersClient, error)
	GetOrdersByUserCredenntials(ctx context.Context, in *GetOrderByUserCredentials, opts ...grpc.CallOption) (*GetOrdersByUserCredentialsResponse, error)
}

type ordersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersServiceClient(cc grpc.ClientConnInterface) OrdersServiceClient {
	return &ordersServiceClient{cc}
}

func (c *ordersServiceClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error) {
	out := new(OrderStatusResponse)
	err := c.cc.Invoke(ctx, OrdersService_PlaceOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) CancelOrder(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error) {
	out := new(OrderStatusResponse)
	err := c.cc.Invoke(ctx, OrdersService_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) GetOrder(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error) {
	out := new(OrderStatusResponse)
	err := c.cc.Invoke(ctx, OrdersService_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) PollOrder(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (OrdersService_PollOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrdersService_ServiceDesc.Streams[0], OrdersService_PollOrder_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersServicePollOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrdersService_PollOrderClient interface {
	Recv() (*OrderStatusResponse, error)
	grpc.ClientStream
}

type ordersServicePollOrderClient struct {
	grpc.ClientStream
}

func (x *ordersServicePollOrderClient) Recv() (*OrderStatusResponse, error) {
	m := new(OrderStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ordersServiceClient) GetOrders(ctx context.Context, in *OrdersStatusesRequest, opts ...grpc.CallOption) (*OrdersStatusesResponse, error) {
	out := new(OrdersStatusesResponse)
	err := c.cc.Invoke(ctx, OrdersService_GetOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersServiceClient) PollOrders(ctx context.Context, in *OrdersStatusesRequest, opts ...grpc.CallOption) (OrdersService_PollOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrdersService_ServiceDesc.Streams[1], OrdersService_PollOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersServicePollOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrdersService_PollOrdersClient interface {
	Recv() (*OrdersStatusesResponse, error)
	grpc.ClientStream
}

type ordersServicePollOrdersClient struct {
	grpc.ClientStream
}

func (x *ordersServicePollOrdersClient) Recv() (*OrdersStatusesResponse, error) {
	m := new(OrdersStatusesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ordersServiceClient) GetOrdersByUserCredenntials(ctx context.Context, in *GetOrderByUserCredentials, opts ...grpc.CallOption) (*GetOrdersByUserCredentialsResponse, error) {
	out := new(GetOrdersByUserCredentialsResponse)
	err := c.cc.Invoke(ctx, OrdersService_GetOrdersByUserCredenntials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersServiceServer is the server API for OrdersService service.
// All implementations must embed UnimplementedOrdersServiceServer
// for forward compatibility
type OrdersServiceServer interface {
	PlaceOrder(context.Context, *PlaceOrderRequest) (*OrderStatusResponse, error)
	CancelOrder(context.Context, *OrderStatusRequest) (*OrderStatusResponse, error)
	GetOrder(context.Context, *OrderStatusRequest) (*OrderStatusResponse, error)
	PollOrder(*OrderStatusRequest, OrdersService_PollOrderServer) error
	GetOrders(context.Context, *OrdersStatusesRequest) (*OrdersStatusesResponse, error)
	PollOrders(*OrdersStatusesRequest, OrdersService_PollOrdersServer) error
	GetOrdersByUserCredenntials(context.Context, *GetOrderByUserCredentials) (*GetOrdersByUserCredentialsResponse, error)
	mustEmbedUnimplementedOrdersServiceServer()
}

// UnimplementedOrdersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersServiceServer struct {
}

func (UnimplementedOrdersServiceServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*OrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedOrdersServiceServer) CancelOrder(context.Context, *OrderStatusRequest) (*OrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrdersServiceServer) GetOrder(context.Context, *OrderStatusRequest) (*OrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrdersServiceServer) PollOrder(*OrderStatusRequest, OrdersService_PollOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method PollOrder not implemented")
}
func (UnimplementedOrdersServiceServer) GetOrders(context.Context, *OrdersStatusesRequest) (*OrdersStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedOrdersServiceServer) PollOrders(*OrdersStatusesRequest, OrdersService_PollOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method PollOrders not implemented")
}
func (UnimplementedOrdersServiceServer) GetOrdersByUserCredenntials(context.Context, *GetOrderByUserCredentials) (*GetOrdersByUserCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByUserCredenntials not implemented")
}
func (UnimplementedOrdersServiceServer) mustEmbedUnimplementedOrdersServiceServer() {}

// UnsafeOrdersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersServiceServer will
// result in compilation errors.
type UnsafeOrdersServiceServer interface {
	mustEmbedUnimplementedOrdersServiceServer()
}

func RegisterOrdersServiceServer(s grpc.ServiceRegistrar, srv OrdersServiceServer) {
	s.RegisterService(&OrdersService_ServiceDesc, srv)
}

func _OrdersService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdersService_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdersService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).CancelOrder(ctx, req.(*OrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdersService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetOrder(ctx, req.(*OrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_PollOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrdersServiceServer).PollOrder(m, &ordersServicePollOrderServer{stream})
}

type OrdersService_PollOrderServer interface {
	Send(*OrderStatusResponse) error
	grpc.ServerStream
}

type ordersServicePollOrderServer struct {
	grpc.ServerStream
}

func (x *ordersServicePollOrderServer) Send(m *OrderStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OrdersService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdersService_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetOrders(ctx, req.(*OrdersStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersService_PollOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrdersStatusesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrdersServiceServer).PollOrders(m, &ordersServicePollOrdersServer{stream})
}

type OrdersService_PollOrdersServer interface {
	Send(*OrdersStatusesResponse) error
	grpc.ServerStream
}

type ordersServicePollOrdersServer struct {
	grpc.ServerStream
}

func (x *ordersServicePollOrdersServer) Send(m *OrdersStatusesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OrdersService_GetOrdersByUserCredenntials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByUserCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).GetOrdersByUserCredenntials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdersService_GetOrdersByUserCredenntials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).GetOrdersByUserCredenntials(ctx, req.(*GetOrderByUserCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdersService_ServiceDesc is the grpc.ServiceDesc for OrdersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orders.v1.OrdersService",
	HandlerType: (*OrdersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _OrdersService_PlaceOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrdersService_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrdersService_GetOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _OrdersService_GetOrders_Handler,
		},
		{
			MethodName: "GetOrdersByUserCredenntials",
			Handler:    _OrdersService_GetOrdersByUserCredenntials_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollOrder",
			Handler:       _OrdersService_PollOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PollOrders",
			Handler:       _OrdersService_PollOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orders/v1/orders_service.proto",
}
